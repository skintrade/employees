// === === ===
// GRID STUFF
// === === ===

// grid clearfix mixin (only use for grids)

@mixin cfix-grid() {

    &:before,
    &:after {
        content : " ";
        display : table;
    }

    &:after {
        clear : both;
    }
}

// do the grid maths for standard grid cols

@mixin calc-grid-column($measure, $index, $type) {
    @if ($type == width) {
        .col-#{$measure}-#{$index} {
            width : percentage(($index / $grid-columns));
        }
    }
    @if ($type == push) {
        .col-#{$measure}-#{$type}-#{$index} {
            left : percentage(($index / $grid-columns));
        }
    }
    @if ($type == pull) {
        .col-#{$measure}-#{$type}-#{$index} {
            right : percentage(($index / $grid-columns));
        }
    }
    @if ($type == offset) {
        .col-#{$measure}-#{$type}-#{$index} {
            margin-left : percentage(($index / $grid-columns));
        }
    }
}

@mixin loop-grid-columns($measure, $columns, $type) {
    @for $i from 1 through $columns {
        @include calc-grid-column($measure, $i, $type);
    }
}

@mixin make-grid($measure) {
    @include loop-grid-columns($measure, $grid-columns, width);
    @include loop-grid-columns($measure, $grid-columns, pull);
    @include loop-grid-columns($measure, $grid-columns, push);
    @include loop-grid-columns($measure, $grid-columns, offset);
}

// do the grid maths for 100% width columns

@mixin calc-grid-column-full($measure, $index, $type) {
    @if ($type == width) {
        .col-#{$measure}-#{$index} {
            width : 100%;
        }
    }
    @if ($type == push) {
        .col-#{$measure}-#{$type}-#{$index} {
            left : 100%;
        }
    }
    @if ($type == pull) {
        .col-#{$measure}-#{$type}-#{$index} {
            right : 100%;
        }
    }
    @if ($type == offset) {
        .col-#{$measure}-#{$type}-#{$index} {
            margin-left : 100%;
        }
    }
}

@mixin loop-grid-columns-full($measure, $columns, $type) {
    @for $i from 1 through $columns {
        @include calc-grid-column-full($measure,$i, $type);
    }
}

@mixin make-grid-full($measure) {
    @include loop-grid-columns-full($measure, $grid-columns, width);
    @include loop-grid-columns-full($measure, $grid-columns, pull);
    @include loop-grid-columns-full($measure, $grid-columns, push);
    @include loop-grid-columns-full($measure, $grid-columns, offset);
}

// define container fixed

@mixin container($width : 100%) {
    margin-right  : auto;
    margin-left   : auto;
    @include sizing(rem, padding-left, ($grid-gutter-width / 2));
    @include sizing(rem, padding-right, ($grid-gutter-width / 2));
    width         : $width;
    @include cfix-grid();
}

// Creates a wrapper for a series of columns

@mixin make-hor-container() {
    @include sizing(rem, margin-left, ($grid-gutter-width / -2));
    @include sizing(rem, margin-right, ($grid-gutter-width / -2));
    @include cfix-grid();
}
